type AppDto = record {
  id : principal;
  usages : vec AppUsage;
  state : AppState;
};
type AppState = variant {
  Active : record { name : text; revision : nat32 };
  Deleted;
};
type AppUsage = record {
  kind : UsageKind;
  timestamp : Timestamp;
  amount : Tokens;
};
type DeployAppRequest = record { name : text; app_data : blob };
type DeveloperDto = record { escrow_account : blob };
type Error = variant {
  Internal : text;
  DeveloperAccountNotFound;
  MaxAppsCountReached;
  AppNotFound;
  DeveloperAccountAlreadyExist;
  InsufficientBalanceForDeploy : record { was : Tokens; needed : Tokens };
};
type InitArgs = record {
  exchange_rate_timeout_seconds : nat64;
  minimum_escrow_balance_for_deploy : Tokens;
  commition_rate : float32;
  max_apps_per_developer : nat64;
};
type Result = variant { Ok : principal; Err : Error };
type GetAppResult = variant { Ok : opt AppDto; Err : Error };
type GetAppsResult = variant { Ok : vec AppDto; Err : Error };
type GetDeveloperResult = variant { Ok : DeveloperDto; Err : Error };
type RemoveAppResult = variant { Ok; Err : Error };
type RequestCyclesResult = variant { Ok : nat; Err : Error };
type RequestEscrowWithdrawResult = variant { Ok : nat64; Err : Error };
type Timestamp = record { timestamp_nanos : nat64 };
type Tokens = record { e8s : nat64 };
type UsageKind = variant {
  AdditionalServices : record { details : blob };
  CyclesCharge : record { cylces : nat };
};
service : (InitArgs) -> {
  deploy_app : (DeployAppRequest) -> (Result);
  get_app : (principal) -> (GetAppResult) query;
  get_apps : () -> (GetAppsResult) query;
  get_developer : () -> (GetDeveloperResult) query;
  register_developer : () -> (Result);
  remove_app : (principal) -> (RemoveAppResult);
  request_cycles : (nat64) -> (RequestCyclesResult);
  request_escrow_withdraw : (blob, Tokens) -> (RequestEscrowWithdrawResult);
}
